apiVersion: apps/v1
kind: Deployment
metadata:
  name: agentstate
  namespace: agentstate
  labels:
    app: agentstate
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: agentstate
  template:
    metadata:
      labels:
        app: agentstate
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: agentstate
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: agentstate
        image: agentstate:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 9090
          protocol: TCP
        env:
        - name: DATA_DIR
          value: /data
        - name: LOG_LEVEL
          value: info
        - name: OTLP_ENDPOINT
          value: http://jaeger-collector:14268/api/traces
        volumeMounts:
        - name: data
          mountPath: /data
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: agentstate-data
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "agentstate-nodes"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - agentstate
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: agentstate
  namespace: agentstate
  labels:
    app: agentstate
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: grpc
    protocol: TCP
    name: grpc
  selector:
    app: agentstate
---
apiVersion: v1
kind: Service
metadata:
  name: agentstate-headless
  namespace: agentstate
  labels:
    app: agentstate
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: grpc
    protocol: TCP
    name: grpc
  selector:
    app: agentstate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: agentstate-data
  namespace: agentstate
  labels:
    app: agentstate
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: agentstate
  namespace: agentstate
  labels:
    app: agentstate
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: agentstate-reader
  labels:
    app: agentstate
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: agentstate-reader
  labels:
    app: agentstate
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: agentstate-reader
subjects:
- kind: ServiceAccount
  name: agentstate
  namespace: agentstate
---
apiVersion: v1
kind: Namespace
metadata:
  name: agentstate
  labels:
    name: agentstate